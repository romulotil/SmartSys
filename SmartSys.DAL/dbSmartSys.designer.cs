#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartSys.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SmartSys")]
	public partial class dbSmartSysDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertConsumidor(Consumidor instance);
    partial void UpdateConsumidor(Consumidor instance);
    partial void DeleteConsumidor(Consumidor instance);
    partial void InsertTipoTratador(TipoTratador instance);
    partial void UpdateTipoTratador(TipoTratador instance);
    partial void DeleteTipoTratador(TipoTratador instance);
    partial void InsertConsumidorProduto(ConsumidorProduto instance);
    partial void UpdateConsumidorProduto(ConsumidorProduto instance);
    partial void DeleteConsumidorProduto(ConsumidorProduto instance);
    partial void InsertProduto(Produto instance);
    partial void UpdateProduto(Produto instance);
    partial void DeleteProduto(Produto instance);
    partial void InsertTipoAgua(TipoAgua instance);
    partial void UpdateTipoAgua(TipoAgua instance);
    partial void DeleteTipoAgua(TipoAgua instance);
    partial void InsertTipoConsumidor(TipoConsumidor instance);
    partial void UpdateTipoConsumidor(TipoConsumidor instance);
    partial void DeleteTipoConsumidor(TipoConsumidor instance);
    partial void InsertTipoFiltro(TipoFiltro instance);
    partial void UpdateTipoFiltro(TipoFiltro instance);
    partial void DeleteTipoFiltro(TipoFiltro instance);
    partial void InsertTipoMaterial(TipoMaterial instance);
    partial void UpdateTipoMaterial(TipoMaterial instance);
    partial void DeleteTipoMaterial(TipoMaterial instance);
    #endregion
		
		public dbSmartSysDataContext() : 
				base(global::SmartSys.DAL.Properties.Settings.Default.SmartSysConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbSmartSysDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbSmartSysDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbSmartSysDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbSmartSysDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Consumidor> Consumidors
		{
			get
			{
				return this.GetTable<Consumidor>();
			}
		}
		
		public System.Data.Linq.Table<TipoTratador> TipoTratadors
		{
			get
			{
				return this.GetTable<TipoTratador>();
			}
		}
		
		public System.Data.Linq.Table<ConsumidorProduto> ConsumidorProdutos
		{
			get
			{
				return this.GetTable<ConsumidorProduto>();
			}
		}
		
		public System.Data.Linq.Table<Produto> Produtos
		{
			get
			{
				return this.GetTable<Produto>();
			}
		}
		
		public System.Data.Linq.Table<TipoAgua> TipoAguas
		{
			get
			{
				return this.GetTable<TipoAgua>();
			}
		}
		
		public System.Data.Linq.Table<TipoConsumidor> TipoConsumidors
		{
			get
			{
				return this.GetTable<TipoConsumidor>();
			}
		}
		
		public System.Data.Linq.Table<TipoFiltro> TipoFiltros
		{
			get
			{
				return this.GetTable<TipoFiltro>();
			}
		}
		
		public System.Data.Linq.Table<TipoMaterial> TipoMaterials
		{
			get
			{
				return this.GetTable<TipoMaterial>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Consumidor")]
	public partial class Consumidor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodConsumidor;
		
		private string _Nome;
		
		private string _Endereco;
		
		private System.Nullable<int> _Numero;
		
		private string _Complemento;
		
		private string _Bairro;
		
		private string _Cidade;
		
		private string _UF;
		
		private string _CEP;
		
		private string _Telefone;
		
		private string _Celular;
		
		private string _Email;
		
		private System.Nullable<bool> _News;
		
		private string _Observacao;
		
		private System.Nullable<int> _CodTipoConsumidor;
		
		private System.Nullable<int> _CodTipoTratador;
		
		private System.Nullable<int> _CodTipoAgua;
		
		private System.Nullable<int> _CodTipoPiscina;
		
		private System.Nullable<int> _CodTipoSpa;
		
		private System.Nullable<int> _CodFiltroPiscina;
		
		private System.Nullable<int> _CodFiltroSpa;
		
		private string _VolPiscina;
		
		private string _VolSpa;
		
		private EntitySet<ConsumidorProduto> _ConsumidorProdutos;
		
		private EntityRef<TipoTratador> _TipoTratador;
		
		private EntityRef<TipoAgua> _TipoAgua;
		
		private EntityRef<TipoConsumidor> _TipoConsumidor;
		
		private EntityRef<TipoFiltro> _TipoFiltro;
		
		private EntityRef<TipoFiltro> _TipoFiltro1;
		
		private EntityRef<TipoMaterial> _TipoMaterial;
		
		private EntityRef<TipoMaterial> _TipoMaterial1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodConsumidorChanging(int value);
    partial void OnCodConsumidorChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnEnderecoChanging(string value);
    partial void OnEnderecoChanged();
    partial void OnNumeroChanging(System.Nullable<int> value);
    partial void OnNumeroChanged();
    partial void OnComplementoChanging(string value);
    partial void OnComplementoChanged();
    partial void OnBairroChanging(string value);
    partial void OnBairroChanged();
    partial void OnCidadeChanging(string value);
    partial void OnCidadeChanged();
    partial void OnUFChanging(string value);
    partial void OnUFChanged();
    partial void OnCEPChanging(string value);
    partial void OnCEPChanged();
    partial void OnTelefoneChanging(string value);
    partial void OnTelefoneChanged();
    partial void OnCelularChanging(string value);
    partial void OnCelularChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNewsChanging(System.Nullable<bool> value);
    partial void OnNewsChanged();
    partial void OnObservacaoChanging(string value);
    partial void OnObservacaoChanged();
    partial void OnCodTipoConsumidorChanging(System.Nullable<int> value);
    partial void OnCodTipoConsumidorChanged();
    partial void OnCodTipoTratadorChanging(System.Nullable<int> value);
    partial void OnCodTipoTratadorChanged();
    partial void OnCodTipoAguaChanging(System.Nullable<int> value);
    partial void OnCodTipoAguaChanged();
    partial void OnCodTipoPiscinaChanging(System.Nullable<int> value);
    partial void OnCodTipoPiscinaChanged();
    partial void OnCodTipoSpaChanging(System.Nullable<int> value);
    partial void OnCodTipoSpaChanged();
    partial void OnCodFiltroPiscinaChanging(System.Nullable<int> value);
    partial void OnCodFiltroPiscinaChanged();
    partial void OnCodFiltroSpaChanging(System.Nullable<int> value);
    partial void OnCodFiltroSpaChanged();
    partial void OnVolPiscinaChanging(string value);
    partial void OnVolPiscinaChanged();
    partial void OnVolSpaChanging(string value);
    partial void OnVolSpaChanged();
    #endregion
		
		public Consumidor()
		{
			this._ConsumidorProdutos = new EntitySet<ConsumidorProduto>(new Action<ConsumidorProduto>(this.attach_ConsumidorProdutos), new Action<ConsumidorProduto>(this.detach_ConsumidorProdutos));
			this._TipoTratador = default(EntityRef<TipoTratador>);
			this._TipoAgua = default(EntityRef<TipoAgua>);
			this._TipoConsumidor = default(EntityRef<TipoConsumidor>);
			this._TipoFiltro = default(EntityRef<TipoFiltro>);
			this._TipoFiltro1 = default(EntityRef<TipoFiltro>);
			this._TipoMaterial = default(EntityRef<TipoMaterial>);
			this._TipoMaterial1 = default(EntityRef<TipoMaterial>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodConsumidor", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodConsumidor
		{
			get
			{
				return this._CodConsumidor;
			}
			set
			{
				if ((this._CodConsumidor != value))
				{
					this.OnCodConsumidorChanging(value);
					this.SendPropertyChanging();
					this._CodConsumidor = value;
					this.SendPropertyChanged("CodConsumidor");
					this.OnCodConsumidorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(60)")]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Endereco", DbType="VarChar(100)")]
		public string Endereco
		{
			get
			{
				return this._Endereco;
			}
			set
			{
				if ((this._Endereco != value))
				{
					this.OnEnderecoChanging(value);
					this.SendPropertyChanging();
					this._Endereco = value;
					this.SendPropertyChanged("Endereco");
					this.OnEnderecoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Numero", DbType="Int")]
		public System.Nullable<int> Numero
		{
			get
			{
				return this._Numero;
			}
			set
			{
				if ((this._Numero != value))
				{
					this.OnNumeroChanging(value);
					this.SendPropertyChanging();
					this._Numero = value;
					this.SendPropertyChanged("Numero");
					this.OnNumeroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Complemento", DbType="VarChar(30)")]
		public string Complemento
		{
			get
			{
				return this._Complemento;
			}
			set
			{
				if ((this._Complemento != value))
				{
					this.OnComplementoChanging(value);
					this.SendPropertyChanging();
					this._Complemento = value;
					this.SendPropertyChanged("Complemento");
					this.OnComplementoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bairro", DbType="VarChar(30)")]
		public string Bairro
		{
			get
			{
				return this._Bairro;
			}
			set
			{
				if ((this._Bairro != value))
				{
					this.OnBairroChanging(value);
					this.SendPropertyChanging();
					this._Bairro = value;
					this.SendPropertyChanged("Bairro");
					this.OnBairroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cidade", DbType="VarChar(50)")]
		public string Cidade
		{
			get
			{
				return this._Cidade;
			}
			set
			{
				if ((this._Cidade != value))
				{
					this.OnCidadeChanging(value);
					this.SendPropertyChanging();
					this._Cidade = value;
					this.SendPropertyChanged("Cidade");
					this.OnCidadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UF", DbType="VarChar(2)")]
		public string UF
		{
			get
			{
				return this._UF;
			}
			set
			{
				if ((this._UF != value))
				{
					this.OnUFChanging(value);
					this.SendPropertyChanging();
					this._UF = value;
					this.SendPropertyChanged("UF");
					this.OnUFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CEP", DbType="VarChar(10)")]
		public string CEP
		{
			get
			{
				return this._CEP;
			}
			set
			{
				if ((this._CEP != value))
				{
					this.OnCEPChanging(value);
					this.SendPropertyChanging();
					this._CEP = value;
					this.SendPropertyChanged("CEP");
					this.OnCEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefone", DbType="VarChar(20)")]
		public string Telefone
		{
			get
			{
				return this._Telefone;
			}
			set
			{
				if ((this._Telefone != value))
				{
					this.OnTelefoneChanging(value);
					this.SendPropertyChanging();
					this._Telefone = value;
					this.SendPropertyChanged("Telefone");
					this.OnTelefoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Celular", DbType="VarChar(20)")]
		public string Celular
		{
			get
			{
				return this._Celular;
			}
			set
			{
				if ((this._Celular != value))
				{
					this.OnCelularChanging(value);
					this.SendPropertyChanging();
					this._Celular = value;
					this.SendPropertyChanged("Celular");
					this.OnCelularChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_News", DbType="Bit")]
		public System.Nullable<bool> News
		{
			get
			{
				return this._News;
			}
			set
			{
				if ((this._News != value))
				{
					this.OnNewsChanging(value);
					this.SendPropertyChanging();
					this._News = value;
					this.SendPropertyChanged("News");
					this.OnNewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Observacao", DbType="VarChar(200)")]
		public string Observacao
		{
			get
			{
				return this._Observacao;
			}
			set
			{
				if ((this._Observacao != value))
				{
					this.OnObservacaoChanging(value);
					this.SendPropertyChanging();
					this._Observacao = value;
					this.SendPropertyChanged("Observacao");
					this.OnObservacaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipoConsumidor", DbType="Int")]
		public System.Nullable<int> CodTipoConsumidor
		{
			get
			{
				return this._CodTipoConsumidor;
			}
			set
			{
				if ((this._CodTipoConsumidor != value))
				{
					if (this._TipoConsumidor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodTipoConsumidorChanging(value);
					this.SendPropertyChanging();
					this._CodTipoConsumidor = value;
					this.SendPropertyChanged("CodTipoConsumidor");
					this.OnCodTipoConsumidorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipoTratador", DbType="Int")]
		public System.Nullable<int> CodTipoTratador
		{
			get
			{
				return this._CodTipoTratador;
			}
			set
			{
				if ((this._CodTipoTratador != value))
				{
					if (this._TipoTratador.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodTipoTratadorChanging(value);
					this.SendPropertyChanging();
					this._CodTipoTratador = value;
					this.SendPropertyChanged("CodTipoTratador");
					this.OnCodTipoTratadorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipoAgua", DbType="Int")]
		public System.Nullable<int> CodTipoAgua
		{
			get
			{
				return this._CodTipoAgua;
			}
			set
			{
				if ((this._CodTipoAgua != value))
				{
					if (this._TipoAgua.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodTipoAguaChanging(value);
					this.SendPropertyChanging();
					this._CodTipoAgua = value;
					this.SendPropertyChanged("CodTipoAgua");
					this.OnCodTipoAguaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipoPiscina", DbType="Int")]
		public System.Nullable<int> CodTipoPiscina
		{
			get
			{
				return this._CodTipoPiscina;
			}
			set
			{
				if ((this._CodTipoPiscina != value))
				{
					if (this._TipoMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodTipoPiscinaChanging(value);
					this.SendPropertyChanging();
					this._CodTipoPiscina = value;
					this.SendPropertyChanged("CodTipoPiscina");
					this.OnCodTipoPiscinaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipoSpa", DbType="Int")]
		public System.Nullable<int> CodTipoSpa
		{
			get
			{
				return this._CodTipoSpa;
			}
			set
			{
				if ((this._CodTipoSpa != value))
				{
					if (this._TipoMaterial1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodTipoSpaChanging(value);
					this.SendPropertyChanging();
					this._CodTipoSpa = value;
					this.SendPropertyChanged("CodTipoSpa");
					this.OnCodTipoSpaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodFiltroPiscina", DbType="Int")]
		public System.Nullable<int> CodFiltroPiscina
		{
			get
			{
				return this._CodFiltroPiscina;
			}
			set
			{
				if ((this._CodFiltroPiscina != value))
				{
					if (this._TipoFiltro.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodFiltroPiscinaChanging(value);
					this.SendPropertyChanging();
					this._CodFiltroPiscina = value;
					this.SendPropertyChanged("CodFiltroPiscina");
					this.OnCodFiltroPiscinaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodFiltroSpa", DbType="Int")]
		public System.Nullable<int> CodFiltroSpa
		{
			get
			{
				return this._CodFiltroSpa;
			}
			set
			{
				if ((this._CodFiltroSpa != value))
				{
					if (this._TipoFiltro1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodFiltroSpaChanging(value);
					this.SendPropertyChanging();
					this._CodFiltroSpa = value;
					this.SendPropertyChanged("CodFiltroSpa");
					this.OnCodFiltroSpaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolPiscina", DbType="VarChar(15)")]
		public string VolPiscina
		{
			get
			{
				return this._VolPiscina;
			}
			set
			{
				if ((this._VolPiscina != value))
				{
					this.OnVolPiscinaChanging(value);
					this.SendPropertyChanging();
					this._VolPiscina = value;
					this.SendPropertyChanged("VolPiscina");
					this.OnVolPiscinaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolSpa", DbType="VarChar(15)")]
		public string VolSpa
		{
			get
			{
				return this._VolSpa;
			}
			set
			{
				if ((this._VolSpa != value))
				{
					this.OnVolSpaChanging(value);
					this.SendPropertyChanging();
					this._VolSpa = value;
					this.SendPropertyChanged("VolSpa");
					this.OnVolSpaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consumidor_ConsumidorProduto", Storage="_ConsumidorProdutos", ThisKey="CodConsumidor", OtherKey="CodConsumidor")]
		public EntitySet<ConsumidorProduto> ConsumidorProdutos
		{
			get
			{
				return this._ConsumidorProdutos;
			}
			set
			{
				this._ConsumidorProdutos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoTratador_Consumidor", Storage="_TipoTratador", ThisKey="CodTipoTratador", OtherKey="CodTipoTratador", IsForeignKey=true)]
		public TipoTratador TipoTratador
		{
			get
			{
				return this._TipoTratador.Entity;
			}
			set
			{
				TipoTratador previousValue = this._TipoTratador.Entity;
				if (((previousValue != value) 
							|| (this._TipoTratador.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoTratador.Entity = null;
						previousValue.Consumidors.Remove(this);
					}
					this._TipoTratador.Entity = value;
					if ((value != null))
					{
						value.Consumidors.Add(this);
						this._CodTipoTratador = value.CodTipoTratador;
					}
					else
					{
						this._CodTipoTratador = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoTratador");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoAgua_Consumidor", Storage="_TipoAgua", ThisKey="CodTipoAgua", OtherKey="CodTipoAgua", IsForeignKey=true)]
		public TipoAgua TipoAgua
		{
			get
			{
				return this._TipoAgua.Entity;
			}
			set
			{
				TipoAgua previousValue = this._TipoAgua.Entity;
				if (((previousValue != value) 
							|| (this._TipoAgua.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoAgua.Entity = null;
						previousValue.Consumidors.Remove(this);
					}
					this._TipoAgua.Entity = value;
					if ((value != null))
					{
						value.Consumidors.Add(this);
						this._CodTipoAgua = value.CodTipoAgua;
					}
					else
					{
						this._CodTipoAgua = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoAgua");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoConsumidor_Consumidor", Storage="_TipoConsumidor", ThisKey="CodTipoConsumidor", OtherKey="CodTipoConsumidor", IsForeignKey=true)]
		public TipoConsumidor TipoConsumidor
		{
			get
			{
				return this._TipoConsumidor.Entity;
			}
			set
			{
				TipoConsumidor previousValue = this._TipoConsumidor.Entity;
				if (((previousValue != value) 
							|| (this._TipoConsumidor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoConsumidor.Entity = null;
						previousValue.Consumidors.Remove(this);
					}
					this._TipoConsumidor.Entity = value;
					if ((value != null))
					{
						value.Consumidors.Add(this);
						this._CodTipoConsumidor = value.CodTipoConsumidor;
					}
					else
					{
						this._CodTipoConsumidor = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoConsumidor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoFiltro_Consumidor", Storage="_TipoFiltro", ThisKey="CodFiltroPiscina", OtherKey="CodTipoFiltro", IsForeignKey=true)]
		public TipoFiltro TipoFiltro
		{
			get
			{
				return this._TipoFiltro.Entity;
			}
			set
			{
				TipoFiltro previousValue = this._TipoFiltro.Entity;
				if (((previousValue != value) 
							|| (this._TipoFiltro.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoFiltro.Entity = null;
						previousValue.Consumidors.Remove(this);
					}
					this._TipoFiltro.Entity = value;
					if ((value != null))
					{
						value.Consumidors.Add(this);
						this._CodFiltroPiscina = value.CodTipoFiltro;
					}
					else
					{
						this._CodFiltroPiscina = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoFiltro");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoFiltro_Consumidor1", Storage="_TipoFiltro1", ThisKey="CodFiltroSpa", OtherKey="CodTipoFiltro", IsForeignKey=true)]
		public TipoFiltro TipoFiltro1
		{
			get
			{
				return this._TipoFiltro1.Entity;
			}
			set
			{
				TipoFiltro previousValue = this._TipoFiltro1.Entity;
				if (((previousValue != value) 
							|| (this._TipoFiltro1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoFiltro1.Entity = null;
						previousValue.Consumidors1.Remove(this);
					}
					this._TipoFiltro1.Entity = value;
					if ((value != null))
					{
						value.Consumidors1.Add(this);
						this._CodFiltroSpa = value.CodTipoFiltro;
					}
					else
					{
						this._CodFiltroSpa = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoFiltro1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoMaterial_Consumidor", Storage="_TipoMaterial", ThisKey="CodTipoPiscina", OtherKey="CodTipoMaterial", IsForeignKey=true)]
		public TipoMaterial TipoMaterial
		{
			get
			{
				return this._TipoMaterial.Entity;
			}
			set
			{
				TipoMaterial previousValue = this._TipoMaterial.Entity;
				if (((previousValue != value) 
							|| (this._TipoMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoMaterial.Entity = null;
						previousValue.Consumidors.Remove(this);
					}
					this._TipoMaterial.Entity = value;
					if ((value != null))
					{
						value.Consumidors.Add(this);
						this._CodTipoPiscina = value.CodTipoMaterial;
					}
					else
					{
						this._CodTipoPiscina = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoMaterial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoMaterial_Consumidor1", Storage="_TipoMaterial1", ThisKey="CodTipoSpa", OtherKey="CodTipoMaterial", IsForeignKey=true)]
		public TipoMaterial TipoMaterial1
		{
			get
			{
				return this._TipoMaterial1.Entity;
			}
			set
			{
				TipoMaterial previousValue = this._TipoMaterial1.Entity;
				if (((previousValue != value) 
							|| (this._TipoMaterial1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoMaterial1.Entity = null;
						previousValue.Consumidors1.Remove(this);
					}
					this._TipoMaterial1.Entity = value;
					if ((value != null))
					{
						value.Consumidors1.Add(this);
						this._CodTipoSpa = value.CodTipoMaterial;
					}
					else
					{
						this._CodTipoSpa = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoMaterial1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsumidorProdutos(ConsumidorProduto entity)
		{
			this.SendPropertyChanging();
			entity.Consumidor = this;
		}
		
		private void detach_ConsumidorProdutos(ConsumidorProduto entity)
		{
			this.SendPropertyChanging();
			entity.Consumidor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TipoTratador")]
	public partial class TipoTratador : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodTipoTratador;
		
		private string _TipoTratador1;
		
		private EntitySet<Consumidor> _Consumidors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodTipoTratadorChanging(int value);
    partial void OnCodTipoTratadorChanged();
    partial void OnTipoTratador1Changing(string value);
    partial void OnTipoTratador1Changed();
    #endregion
		
		public TipoTratador()
		{
			this._Consumidors = new EntitySet<Consumidor>(new Action<Consumidor>(this.attach_Consumidors), new Action<Consumidor>(this.detach_Consumidors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipoTratador", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodTipoTratador
		{
			get
			{
				return this._CodTipoTratador;
			}
			set
			{
				if ((this._CodTipoTratador != value))
				{
					this.OnCodTipoTratadorChanging(value);
					this.SendPropertyChanging();
					this._CodTipoTratador = value;
					this.SendPropertyChanged("CodTipoTratador");
					this.OnCodTipoTratadorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TipoTratador", Storage="_TipoTratador1", DbType="VarChar(30)")]
		public string TipoTratador1
		{
			get
			{
				return this._TipoTratador1;
			}
			set
			{
				if ((this._TipoTratador1 != value))
				{
					this.OnTipoTratador1Changing(value);
					this.SendPropertyChanging();
					this._TipoTratador1 = value;
					this.SendPropertyChanged("TipoTratador1");
					this.OnTipoTratador1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoTratador_Consumidor", Storage="_Consumidors", ThisKey="CodTipoTratador", OtherKey="CodTipoTratador")]
		public EntitySet<Consumidor> Consumidors
		{
			get
			{
				return this._Consumidors;
			}
			set
			{
				this._Consumidors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Consumidors(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoTratador = this;
		}
		
		private void detach_Consumidors(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoTratador = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConsumidorProduto")]
	public partial class ConsumidorProduto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodConsumidorProduto;
		
		private System.Nullable<int> _CodConsumidor;
		
		private System.Nullable<int> _CodProduto;
		
		private EntityRef<Consumidor> _Consumidor;
		
		private EntityRef<Produto> _Produto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodConsumidorProdutoChanging(int value);
    partial void OnCodConsumidorProdutoChanged();
    partial void OnCodConsumidorChanging(System.Nullable<int> value);
    partial void OnCodConsumidorChanged();
    partial void OnCodProdutoChanging(System.Nullable<int> value);
    partial void OnCodProdutoChanged();
    #endregion
		
		public ConsumidorProduto()
		{
			this._Consumidor = default(EntityRef<Consumidor>);
			this._Produto = default(EntityRef<Produto>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodConsumidorProduto", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodConsumidorProduto
		{
			get
			{
				return this._CodConsumidorProduto;
			}
			set
			{
				if ((this._CodConsumidorProduto != value))
				{
					this.OnCodConsumidorProdutoChanging(value);
					this.SendPropertyChanging();
					this._CodConsumidorProduto = value;
					this.SendPropertyChanged("CodConsumidorProduto");
					this.OnCodConsumidorProdutoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodConsumidor", DbType="Int")]
		public System.Nullable<int> CodConsumidor
		{
			get
			{
				return this._CodConsumidor;
			}
			set
			{
				if ((this._CodConsumidor != value))
				{
					if (this._Consumidor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodConsumidorChanging(value);
					this.SendPropertyChanging();
					this._CodConsumidor = value;
					this.SendPropertyChanged("CodConsumidor");
					this.OnCodConsumidorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodProduto", DbType="Int")]
		public System.Nullable<int> CodProduto
		{
			get
			{
				return this._CodProduto;
			}
			set
			{
				if ((this._CodProduto != value))
				{
					if (this._Produto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodProdutoChanging(value);
					this.SendPropertyChanging();
					this._CodProduto = value;
					this.SendPropertyChanged("CodProduto");
					this.OnCodProdutoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consumidor_ConsumidorProduto", Storage="_Consumidor", ThisKey="CodConsumidor", OtherKey="CodConsumidor", IsForeignKey=true)]
		public Consumidor Consumidor
		{
			get
			{
				return this._Consumidor.Entity;
			}
			set
			{
				Consumidor previousValue = this._Consumidor.Entity;
				if (((previousValue != value) 
							|| (this._Consumidor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Consumidor.Entity = null;
						previousValue.ConsumidorProdutos.Remove(this);
					}
					this._Consumidor.Entity = value;
					if ((value != null))
					{
						value.ConsumidorProdutos.Add(this);
						this._CodConsumidor = value.CodConsumidor;
					}
					else
					{
						this._CodConsumidor = default(Nullable<int>);
					}
					this.SendPropertyChanged("Consumidor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Produto_ConsumidorProduto", Storage="_Produto", ThisKey="CodProduto", OtherKey="CodProduto", IsForeignKey=true)]
		public Produto Produto
		{
			get
			{
				return this._Produto.Entity;
			}
			set
			{
				Produto previousValue = this._Produto.Entity;
				if (((previousValue != value) 
							|| (this._Produto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Produto.Entity = null;
						previousValue.ConsumidorProdutos.Remove(this);
					}
					this._Produto.Entity = value;
					if ((value != null))
					{
						value.ConsumidorProdutos.Add(this);
						this._CodProduto = value.CodProduto;
					}
					else
					{
						this._CodProduto = default(Nullable<int>);
					}
					this.SendPropertyChanged("Produto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Produtos")]
	public partial class Produto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodProduto;
		
		private string _Produto1;
		
		private EntitySet<ConsumidorProduto> _ConsumidorProdutos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodProdutoChanging(int value);
    partial void OnCodProdutoChanged();
    partial void OnProduto1Changing(string value);
    partial void OnProduto1Changed();
    #endregion
		
		public Produto()
		{
			this._ConsumidorProdutos = new EntitySet<ConsumidorProduto>(new Action<ConsumidorProduto>(this.attach_ConsumidorProdutos), new Action<ConsumidorProduto>(this.detach_ConsumidorProdutos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodProduto", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodProduto
		{
			get
			{
				return this._CodProduto;
			}
			set
			{
				if ((this._CodProduto != value))
				{
					this.OnCodProdutoChanging(value);
					this.SendPropertyChanging();
					this._CodProduto = value;
					this.SendPropertyChanged("CodProduto");
					this.OnCodProdutoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Produto", Storage="_Produto1", DbType="VarChar(50)")]
		public string Produto1
		{
			get
			{
				return this._Produto1;
			}
			set
			{
				if ((this._Produto1 != value))
				{
					this.OnProduto1Changing(value);
					this.SendPropertyChanging();
					this._Produto1 = value;
					this.SendPropertyChanged("Produto1");
					this.OnProduto1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Produto_ConsumidorProduto", Storage="_ConsumidorProdutos", ThisKey="CodProduto", OtherKey="CodProduto")]
		public EntitySet<ConsumidorProduto> ConsumidorProdutos
		{
			get
			{
				return this._ConsumidorProdutos;
			}
			set
			{
				this._ConsumidorProdutos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsumidorProdutos(ConsumidorProduto entity)
		{
			this.SendPropertyChanging();
			entity.Produto = this;
		}
		
		private void detach_ConsumidorProdutos(ConsumidorProduto entity)
		{
			this.SendPropertyChanging();
			entity.Produto = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TipoAgua")]
	public partial class TipoAgua : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodTipoAgua;
		
		private string _TipoAgua1;
		
		private EntitySet<Consumidor> _Consumidors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodTipoAguaChanging(int value);
    partial void OnCodTipoAguaChanged();
    partial void OnTipoAgua1Changing(string value);
    partial void OnTipoAgua1Changed();
    #endregion
		
		public TipoAgua()
		{
			this._Consumidors = new EntitySet<Consumidor>(new Action<Consumidor>(this.attach_Consumidors), new Action<Consumidor>(this.detach_Consumidors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipoAgua", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodTipoAgua
		{
			get
			{
				return this._CodTipoAgua;
			}
			set
			{
				if ((this._CodTipoAgua != value))
				{
					this.OnCodTipoAguaChanging(value);
					this.SendPropertyChanging();
					this._CodTipoAgua = value;
					this.SendPropertyChanged("CodTipoAgua");
					this.OnCodTipoAguaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TipoAgua", Storage="_TipoAgua1", DbType="VarChar(30)")]
		public string TipoAgua1
		{
			get
			{
				return this._TipoAgua1;
			}
			set
			{
				if ((this._TipoAgua1 != value))
				{
					this.OnTipoAgua1Changing(value);
					this.SendPropertyChanging();
					this._TipoAgua1 = value;
					this.SendPropertyChanged("TipoAgua1");
					this.OnTipoAgua1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoAgua_Consumidor", Storage="_Consumidors", ThisKey="CodTipoAgua", OtherKey="CodTipoAgua")]
		public EntitySet<Consumidor> Consumidors
		{
			get
			{
				return this._Consumidors;
			}
			set
			{
				this._Consumidors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Consumidors(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoAgua = this;
		}
		
		private void detach_Consumidors(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoAgua = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TipoConsumidor")]
	public partial class TipoConsumidor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodTipoConsumidor;
		
		private string _TipoConsumidor1;
		
		private EntitySet<Consumidor> _Consumidors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodTipoConsumidorChanging(int value);
    partial void OnCodTipoConsumidorChanged();
    partial void OnTipoConsumidor1Changing(string value);
    partial void OnTipoConsumidor1Changed();
    #endregion
		
		public TipoConsumidor()
		{
			this._Consumidors = new EntitySet<Consumidor>(new Action<Consumidor>(this.attach_Consumidors), new Action<Consumidor>(this.detach_Consumidors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipoConsumidor", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodTipoConsumidor
		{
			get
			{
				return this._CodTipoConsumidor;
			}
			set
			{
				if ((this._CodTipoConsumidor != value))
				{
					this.OnCodTipoConsumidorChanging(value);
					this.SendPropertyChanging();
					this._CodTipoConsumidor = value;
					this.SendPropertyChanged("CodTipoConsumidor");
					this.OnCodTipoConsumidorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TipoConsumidor", Storage="_TipoConsumidor1", DbType="VarChar(30)")]
		public string TipoConsumidor1
		{
			get
			{
				return this._TipoConsumidor1;
			}
			set
			{
				if ((this._TipoConsumidor1 != value))
				{
					this.OnTipoConsumidor1Changing(value);
					this.SendPropertyChanging();
					this._TipoConsumidor1 = value;
					this.SendPropertyChanged("TipoConsumidor1");
					this.OnTipoConsumidor1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoConsumidor_Consumidor", Storage="_Consumidors", ThisKey="CodTipoConsumidor", OtherKey="CodTipoConsumidor")]
		public EntitySet<Consumidor> Consumidors
		{
			get
			{
				return this._Consumidors;
			}
			set
			{
				this._Consumidors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Consumidors(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoConsumidor = this;
		}
		
		private void detach_Consumidors(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoConsumidor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TipoFiltro")]
	public partial class TipoFiltro : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodTipoFiltro;
		
		private string _TipoFiltro1;
		
		private EntitySet<Consumidor> _Consumidors;
		
		private EntitySet<Consumidor> _Consumidors1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodTipoFiltroChanging(int value);
    partial void OnCodTipoFiltroChanged();
    partial void OnTipoFiltro1Changing(string value);
    partial void OnTipoFiltro1Changed();
    #endregion
		
		public TipoFiltro()
		{
			this._Consumidors = new EntitySet<Consumidor>(new Action<Consumidor>(this.attach_Consumidors), new Action<Consumidor>(this.detach_Consumidors));
			this._Consumidors1 = new EntitySet<Consumidor>(new Action<Consumidor>(this.attach_Consumidors1), new Action<Consumidor>(this.detach_Consumidors1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipoFiltro", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodTipoFiltro
		{
			get
			{
				return this._CodTipoFiltro;
			}
			set
			{
				if ((this._CodTipoFiltro != value))
				{
					this.OnCodTipoFiltroChanging(value);
					this.SendPropertyChanging();
					this._CodTipoFiltro = value;
					this.SendPropertyChanged("CodTipoFiltro");
					this.OnCodTipoFiltroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TipoFiltro", Storage="_TipoFiltro1", DbType="VarChar(30)")]
		public string TipoFiltro1
		{
			get
			{
				return this._TipoFiltro1;
			}
			set
			{
				if ((this._TipoFiltro1 != value))
				{
					this.OnTipoFiltro1Changing(value);
					this.SendPropertyChanging();
					this._TipoFiltro1 = value;
					this.SendPropertyChanged("TipoFiltro1");
					this.OnTipoFiltro1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoFiltro_Consumidor", Storage="_Consumidors", ThisKey="CodTipoFiltro", OtherKey="CodFiltroPiscina")]
		public EntitySet<Consumidor> Consumidors
		{
			get
			{
				return this._Consumidors;
			}
			set
			{
				this._Consumidors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoFiltro_Consumidor1", Storage="_Consumidors1", ThisKey="CodTipoFiltro", OtherKey="CodFiltroSpa")]
		public EntitySet<Consumidor> Consumidors1
		{
			get
			{
				return this._Consumidors1;
			}
			set
			{
				this._Consumidors1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Consumidors(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoFiltro = this;
		}
		
		private void detach_Consumidors(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoFiltro = null;
		}
		
		private void attach_Consumidors1(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoFiltro1 = this;
		}
		
		private void detach_Consumidors1(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoFiltro1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TipoMaterial")]
	public partial class TipoMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodTipoMaterial;
		
		private string _TipoMaterial1;
		
		private EntitySet<Consumidor> _Consumidors;
		
		private EntitySet<Consumidor> _Consumidors1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodTipoMaterialChanging(int value);
    partial void OnCodTipoMaterialChanged();
    partial void OnTipoMaterial1Changing(string value);
    partial void OnTipoMaterial1Changed();
    #endregion
		
		public TipoMaterial()
		{
			this._Consumidors = new EntitySet<Consumidor>(new Action<Consumidor>(this.attach_Consumidors), new Action<Consumidor>(this.detach_Consumidors));
			this._Consumidors1 = new EntitySet<Consumidor>(new Action<Consumidor>(this.attach_Consumidors1), new Action<Consumidor>(this.detach_Consumidors1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipoMaterial", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodTipoMaterial
		{
			get
			{
				return this._CodTipoMaterial;
			}
			set
			{
				if ((this._CodTipoMaterial != value))
				{
					this.OnCodTipoMaterialChanging(value);
					this.SendPropertyChanging();
					this._CodTipoMaterial = value;
					this.SendPropertyChanged("CodTipoMaterial");
					this.OnCodTipoMaterialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TipoMaterial", Storage="_TipoMaterial1", DbType="VarChar(30)")]
		public string TipoMaterial1
		{
			get
			{
				return this._TipoMaterial1;
			}
			set
			{
				if ((this._TipoMaterial1 != value))
				{
					this.OnTipoMaterial1Changing(value);
					this.SendPropertyChanging();
					this._TipoMaterial1 = value;
					this.SendPropertyChanged("TipoMaterial1");
					this.OnTipoMaterial1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoMaterial_Consumidor", Storage="_Consumidors", ThisKey="CodTipoMaterial", OtherKey="CodTipoPiscina")]
		public EntitySet<Consumidor> Consumidors
		{
			get
			{
				return this._Consumidors;
			}
			set
			{
				this._Consumidors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoMaterial_Consumidor1", Storage="_Consumidors1", ThisKey="CodTipoMaterial", OtherKey="CodTipoSpa")]
		public EntitySet<Consumidor> Consumidors1
		{
			get
			{
				return this._Consumidors1;
			}
			set
			{
				this._Consumidors1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Consumidors(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoMaterial = this;
		}
		
		private void detach_Consumidors(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoMaterial = null;
		}
		
		private void attach_Consumidors1(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoMaterial1 = this;
		}
		
		private void detach_Consumidors1(Consumidor entity)
		{
			this.SendPropertyChanging();
			entity.TipoMaterial1 = null;
		}
	}
}
#pragma warning restore 1591
